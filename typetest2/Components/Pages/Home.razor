@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Web
@using MudBlazor

<big>Try typing the sentence below as fast as you can!</big>

<p>
    @for (int i = 0; i < CorrectSentence.Length; i++)
    {
        char c = CorrectSentence[i];
        string style = i < UserInput.Length
        ? (UserInput[i] == c ? "color:green;" : "color:red;")
        : "color:gray;";
        <span style="@style">@c</span>
    }
</p>

<MudProgressLinear Value="@ProgressPercent" Color="Color.Primary" Style="margin-bottom:10px;" />

<MudInput T="string"
          Value="@UserInput"
          ValueChanged="@OnInputChanged"
          Immediate="true"
          Variant="Variant.Outlined"
          Disabled="@IsCompleted"
          Placeholder="Start typing here..."
          aria-label="Typing input" />

@if (IsCompleted)
{
    @if (ElapsedTime.HasValue)
    {
        <p>Time taken: @ElapsedTime.Value.TotalSeconds.ToString("F2") seconds</p>
        <p>Words Per Minute: @((GetWordCount() / (ElapsedTime.Value.TotalSeconds / 60)).ToString("F1"))</p>
    }
    else
    {
        <p>Calculating time...</p>
    }
    <p>Mistakes: @mistakes</p>
    <MudButton OnClick="ResetTest" Variant="Variant.Filled" Color="Color.Secondary">Try Again</MudButton>
}
else
{
    <p>@ResultMessage</p>
    <MudButton OnClick="ResetTest" Variant="Variant.Outlined" Color="Color.Secondary">Restart</MudButton>
}

@code {
    private const string CorrectSentence = "the quick brown fox jumps over the lazy dog";
    private string UserInput = string.Empty;

    private DateTime? StartTime;
    private TimeSpan? ElapsedTime;
    private int mistakes = 0;

    private string ResultMessage => UserInput == CorrectSentence ? "✅ Matched!" : "❌ Keep Typing...";
    private bool IsCompleted => UserInput == CorrectSentence;

    private double ProgressPercent =>
        100.0 * Math.Min(UserInput.Length, CorrectSentence.Length) / CorrectSentence.Length;

    private int GetWordCount()
    {
        return CorrectSentence.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
    }

    private async Task OnInputChanged(string newValue)
    {
        if (StartTime == null && !string.IsNullOrEmpty(newValue))
        {
            StartTime = DateTime.Now;
            ElapsedTime = null;
            mistakes = 0;
        }

        if (newValue.Length > CorrectSentence.Length)
            newValue = newValue[..CorrectSentence.Length];

        int oldLength = UserInput.Length;
        if (newValue.Length > oldLength)
        {
            int i = oldLength;
            if (i < CorrectSentence.Length && newValue[i] != CorrectSentence[i])
            {
                mistakes++;
            }
        }

        UserInput = newValue;

        if (UserInput == CorrectSentence && StartTime != null && !ElapsedTime.HasValue)
        {
            ElapsedTime = DateTime.Now - StartTime.Value;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ResetTest()
    {
        UserInput = string.Empty;
        StartTime = null;
        ElapsedTime = null;
        mistakes = 0;
    }
}
