@page "/"
@rendermode InteractiveServer

@inject NavigationManager UriHelper

@using System.IO
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor

<big>Try typing the sentence below as fast as you can!</big>

<p>
    @for (int i = 0; i < CorrectSentence.Length; i++)
    {
        char c = CorrectSentence[i];
        string style = i < UserInput.Length
            ? (UserInput[i] == c ? "color:green;" : "color:red;")
            : "color:gray;";
        <span style="@style">@c</span>
    }
</p>

<MudProgressLinear Value="@ProgressPercent" Color="Color.Primary" Style="margin-bottom:10px;" />

<MudInput T="string"
          Value="@UserInput"
          ValueChanged="@OnInputChanged"
          Immediate="true"
          Variant="Variant.Outlined"
          Disabled="@IsCompleted"
          Placeholder="Start typing here..."
          aria-label="Typing input"
          Style="width: 500px;" />

@if (IsCompleted)
{
    <MudButton OnClick="@GoToScoreboard" Variant="Variant.Filled" Color="Color.Primary" Class="mb-2">Go to Scoreboard</MudButton>
    @if (ElapsedTime.HasValue)
    {
        <p>Time taken: @ElapsedTime.Value.TotalSeconds.ToString("F2") seconds</p>
        <p>Words Per Minute: @((GetWordCount() / (ElapsedTime.Value.TotalSeconds / 60)).ToString("F1"))</p>
    }
    else
    {
        <p>Calculating time...</p>
    }
    <p>Mistakes: @mistakes</p>

    <p><b>Improvement:</b> @ImprovementMessage</p>
    <p><b>Common error positions:</b> @CommonErrorPositions</p>

    <MudButton OnClick="ResetTest" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3">Try Again</MudButton>
}
else
{
    <p>@ResultMessage</p>
    <MudButton OnClick="ResetTest" Variant="Variant.Outlined" Color="Color.Secondary">Restart</MudButton>
}

<div style="display: flex; flex-direction: column; align-items: center; margin-top: 24px;">
    <MudButton OnClick="ShowFileContent" Variant="Variant.Outlined" Color="Color.Info">Show Scoreboard</MudButton>
</div>

@if (scores.Keys.Count != 0)
{
    <p>

    </p>
    <big>Scoreboard:</big>
    @foreach(string name in scores.Keys)
    {
        <div style="font-size: 1.5em;">@name : @scores[name]</div>
    }
}

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;
           
    private static readonly List<string> Sentences = new()
    {
        "the quick brown fox jumps over the lazy dog",
        "pack my box with five dozen liquor jugs",
        "how vexingly quick daft zebras jump",
        "bright vixens jump dozy fowl quack",
        "sphinx of black quartz judge my vow",
        "the five boxing wizards jump quickly",
        "crazy fredrick bought many very exquisite opal jewels",
        "we promptly judged antique ivory buckles for the next prize",
        "just keep examining every low bid quoted for zinc etchings",
        "quick zephyrs blow vexing daft jim"
    };

    private string CorrectSentence = string.Empty;
    private string UserInput = string.Empty;

    protected override void OnInitialized()
    {
        var rng = new Random();
        int idx = rng.Next(Sentences.Count);
        CorrectSentence = Sentences[idx];
        base.OnInitialized();
    }
           
    private DateTime? StartTime;
    private TimeSpan? ElapsedTime;
    private int mistakes = 0;

    private string ResultMessage => UserInput == CorrectSentence ? "✅ Matched!" : "❌ Keep Typing...";
    private bool IsCompleted => UserInput == CorrectSentence;

    private double ProgressPercent =>
        100.0 * Math.Min(UserInput.Length, CorrectSentence.Length) / CorrectSentence.Length;

    private int GetWordCount() =>
        CorrectSentence.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;

    // Store previous results 
    private TimeSpan? PreviousTime;
    private int? PreviousMistakes;

    // Error position counts
    private Dictionary<int, int> ErrorCounts = new();

    private Dictionary<string, float> scores = new();

    private string ImprovementMessage = "No previous data.";
    private string CommonErrorPositions = "No errors yet.";

    private string FileContent = string.Empty;

    private async Task OnInputChanged(string newValue)
    {
        if (StartTime == null && !string.IsNullOrEmpty(newValue))
        {
            StartTime = DateTime.Now;
            ElapsedTime = null;
            mistakes = 0;
        }

        if (newValue.Length > CorrectSentence.Length)
            newValue = newValue[..CorrectSentence.Length];

        int oldLength = UserInput.Length;
        if (newValue.Length > oldLength)
        {
            int i = oldLength;
            if (i < CorrectSentence.Length && newValue[i] != CorrectSentence[i])
            {
                mistakes++;
            }
        }

        UserInput = newValue;

        if (IsCompleted && StartTime != null && !ElapsedTime.HasValue)
        {
            ElapsedTime = DateTime.Now - StartTime.Value;            

            AnalyzeImprovement();
            RecordErrorPositions();

            await InvokeAsync(StateHasChanged);
        }
    }

    private void AnalyzeImprovement()
    {
        if (PreviousTime == null || PreviousMistakes == null)
        {
            ImprovementMessage = "First attempt recorded.";
        }
        else
        {
            bool faster = ElapsedTime < PreviousTime;
            bool fewerMistakes = mistakes < PreviousMistakes;

            if (faster && fewerMistakes)
                ImprovementMessage = "Great! Faster and fewer mistakes.";
            else if (faster)
                ImprovementMessage = "Faster but watch mistakes.";
            else if (fewerMistakes)
                ImprovementMessage = "Fewer mistakes but try to speed up.";
            else
                ImprovementMessage = "No improvement detected yet.";
        }

        PreviousTime = ElapsedTime;
        PreviousMistakes = mistakes;
    }

    private void RecordErrorPositions()
    {
        for (int i = 0; i < UserInput.Length; i++)
        {
            if (UserInput[i] != CorrectSentence[i])
            {
                if (ErrorCounts.ContainsKey(i))
                    ErrorCounts[i]++;
                else
                    ErrorCounts[i] = 1;
            }
        }

        if (ErrorCounts.Count == 0)
        {
            CommonErrorPositions = "No errors yet.";
        }
        else
        {
            var topErrors = ErrorCounts
                .OrderByDescending(kv => kv.Value)
                .Take(3)
                .Select(kv => $"{kv.Key} ('{CorrectSentence[kv.Key]}'): {kv.Value} times");

            CommonErrorPositions = string.Join(", ", topErrors);
        }
    }    

    private void ResetTest()
    {
        UserInput = string.Empty;
        StartTime = null;
        ElapsedTime = null;
        mistakes = 0;
        ImprovementMessage = PreviousTime == null ? "No previous data." : ImprovementMessage;
    }

    private void GoToScoreboard()
    {
        var elapsedSeconds = ElapsedTime.HasValue ? ElapsedTime.Value.TotalSeconds : 0;
        UriHelper.NavigateTo($"Scoreboard/{elapsedSeconds}");        
    }

    private void ShowFileContent()
    {
        string readText = File.ReadAllText("scoreboard.txt");
        FileContent = readText;

        scores = new Dictionary<string, float>();

        string[] lines = FileContent.Split("\n");
        foreach (string line in lines)
        {
            string[] lineSplit = line.Split(": ");
            scores[lineSplit[0]] = float.Parse(lineSplit[1]);
        }
        scores = scores.OrderBy(pair => pair.Value).ToDictionary(pair => pair.Key, pair => pair.Value);
    }
}
